vector<int> solution(string &S, vector<int> &P, vector<int> &Q) {
    int N = S.size();
    int M = P.size();
    
    int lastseen_A[N], lastseen_C[N], lastseen_G[N], lastseen_T[N];
    
    for(int i=0;i<N;i++)
    {
        lastseen_A[i] = -1; lastseen_C[i] = -1; lastseen_G[i] = -1; lastseen_T[i] = -1;
    }
    
    for(int i=0;i<N;i++)
    {
        if(i>0)
        {
            if(S[i]=='A')
            {
                lastseen_A[i] = i;
                lastseen_C[i] = lastseen_C[i-1];
                lastseen_G[i] = lastseen_G[i-1];
                lastseen_T[i] = lastseen_T[i-1];
            }
            else if(S[i]=='C')
            {
                lastseen_A[i] = lastseen_A[i-1];
                lastseen_C[i] = i;
                lastseen_G[i] = lastseen_G[i-1];
                lastseen_T[i] = lastseen_T[i-1];
            }
            else if(S[i]=='G')
            {
                lastseen_A[i] = lastseen_A[i-1];
                lastseen_C[i] = lastseen_C[i-1];
                lastseen_G[i] = i;
                lastseen_T[i] = lastseen_T[i-1];
            }
            else if(S[i]=='T')
            {
                lastseen_A[i] = lastseen_A[i-1];
                lastseen_C[i] = lastseen_C[i-1];
                lastseen_G[i] = lastseen_G[i-1];
                lastseen_T[i] = i;
            }
        }
        else
        {
            if(S[i]=='A')
            {
                lastseen_A[i] = i;
            }
            if(S[i]=='C')
            {
                lastseen_C[i] = i;
            }
            if(S[i]=='T')
            {
                lastseen_T[i] = i;
            }
            if(S[i]=='G')
            {
                lastseen_G[i] = i;
            }
        }
    }
    
    vector<int> sol;
    for(int i=0;i<M;i++)
    {
        if(lastseen_A[Q[i]] >= P[i])
        {
            sol.push_back(1);
        }
        else if(lastseen_C[Q[i]] >= P[i])
        {
            sol.push_back(2);
        }
        else if(lastseen_G[Q[i]] >= P[i])
        {
            sol.push_back(3);
        }
        else
        {
            sol.push_back(4);
        }
    }
    
    return sol;
}
